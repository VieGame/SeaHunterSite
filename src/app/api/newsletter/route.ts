import { NextRequest, NextResponse } from 'next/server';
import ContactMessage from '@/models/ContactMessage';
import { sendContactNotificationEmail, sendContactConfirmationEmail } from '@/data/email';
import connectDB from '@/lib/mongodb';
import { extractNameFromEmail, getClientIP } from '@/lib/util';
import { newsletterApiSchema } from '@/lib/validation/contact';

export async function POST(request: NextRequest) {
    try {
        // Parse and validate request body
        const body = await request.json();
        const validatedData = newsletterApiSchema.parse(body);

        // Connect to database
        await connectDB();

        // Check if email already exists for newsletter subscription
        const existingSubscription = await ContactMessage.findOne({
            email: validatedData.email,
            subject: 'Newsletter Subscription'
        });

        if (existingSubscription) {
            return NextResponse.json(
                {
                    success: false,
                    message: 'You are already subscribed to our newsletter.',
                },
                { status: 409 }
            );
        }

        // Auto-fill required fields based on email
        const autoGeneratedName = extractNameFromEmail(validatedData.email);

        // Create newsletter subscription in database
        const newsletterMessage = new ContactMessage({
            name: autoGeneratedName,
            email: validatedData.email,
            subject: 'Newsletter Subscription',
            message: 'Subscribe to our newsletter',
            status: 'new',
            ipAddress: getClientIP(request),
            userAgent: request.headers.get('user-agent') || undefined,
        });

        const savedMessage = await newsletterMessage.save();

        // Send notification email to admin
        await sendContactNotificationEmail(
            {
                name: autoGeneratedName,
                email: validatedData.email,
                subject: 'Newsletter Subscription',
                message: 'Subscribe to our newsletter',
            },
            savedMessage._id.toString()
        );

        // Send confirmation email to user
        await sendContactConfirmationEmail(
            validatedData.email,
            autoGeneratedName
        );

        return NextResponse.json(
            {
                success: true,
                message: 'Successfully subscribed to our newsletter!',
                messageId: savedMessage._id.toString(),
            },
            { status: 200 }
        );

    } catch (error) {
        console.error('Newsletter subscription error:', error);

        // Handle Zod validation errors
        if (error instanceof Error && error.name === 'ZodError') {
            return NextResponse.json(
                {
                    success: false,
                    message: 'Invalid email format',
                    errors: error.message,
                },
                { status: 400 }
            );
        }

        // Handle MongoDB errors
        if (error instanceof Error && error.name === 'ValidationError') {
            return NextResponse.json(
                {
                    success: false,
                    message: 'Invalid data format',
                    errors: error.message,
                },
                { status: 400 }
            );
        }

        // Handle email sending errors
        if (error instanceof Error && error.message.includes('email')) {
            return NextResponse.json(
                {
                    success: false,
                    message: 'Failed to send confirmation email. Please try again later.',
                },
                { status: 500 }
            );
        }

        // Generic error response
        return NextResponse.json(
            {
                success: false,
                message: 'Internal server error. Please try again later.',
            },
            { status: 500 }
        );
    }
}
